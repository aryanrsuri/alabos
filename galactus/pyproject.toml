[build-system]
requires = ["setuptools >= 42", "versioningit ~= 1.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "galactus"
description = "Galactus - Semi-Autonomous Lab Management System with Kafka Events and TimescaleDB"
readme = "README.md"
keywords = ["lab-automation", "workflow", "kafka", "timescale", "postgresql"]
license = { text = "MIT" }
authors = [
    { name = "Galactus Team" }
]
dynamic = ["version"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
]
requires-python = ">=3.11.0"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.12.0",
    "pydantic>=2.5.0",
    "kafka-python-ng>=2.2.2",
    "celery>=5.3.0",
    "redis>=5.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "networkx>=3.0.0",
    "plotly>=5.17.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "boto3>=1.28.0",
    "botocore>=1.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.12.0",
]

[project.urls]
homepage = "https://github.com/your-org/galactus"
repository = "https://github.com/your-org/galactus"
documentation = "https://github.com/your-org/galactus/docs"

[project.scripts]
galactus = "galactus_core.cli:cli"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests", "tests.*", "docs", "examples"]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.1.0"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",   # pydocstyle
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort
    "PLE", # pylint error
    "PLW", # pylint warning
    "Q",   # flake8-quotes
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "TID", # tidy imports
    "UP",  # pyupgrade
    "W",   # pycodestyle
    "YTT", # flake8-2020
]
ignore = ["D100", "D104", "D105", "D107", "PLW0603"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = ["-v", "--tb=short", "--strict-markers"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
